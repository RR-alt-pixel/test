# -*- coding: utf-8 -*-
import requests
import json
import os
import time
import itertools
from flask import Flask, request, jsonify
from flask_cors import CORS
from threading import Thread
from playwright.sync_api import sync_playwright
from typing import Optional, Dict

# ================== 1. –ù–ê–°–¢–†–û–ô–ö–ò –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==================
BOT_TOKEN = "8240195944:AAEQFd2met5meCU1uwu5PvPejJoiKu94cms"

# üîó –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å GitHub
ALLOWED_USERS_URL = "https://raw.githubusercontent.com/RR-alt-pixel/test/refs/heads/main/allowed_ids.json"
ALLOWED_USER_IDS = [0]  # –≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

BASE_URL = "https://crm431241.ru"
SECRET_TOKEN = "Refresh-Server-Key-2025-Oct-VK44"

# ================== 2. –ù–ê–°–¢–†–û–ô–ö–ò PLAYWRIGHT ==================
LOGIN_URL_PLW = f"{BASE_URL}/auth/login"
DASHBOARD_URL = f"{BASE_URL}/dashboard"
LOGIN_SELECTOR = '#username'
PASSWORD_SELECTOR = '#password'
SIGN_IN_BUTTON_SELECTOR = 'button[type="submit"]'

# ================== 3. –ê–ö–ö–ê–£–ù–¢–´ ==================
accounts = [
    {"username": "blue1", "password": "852dfghm"},
]

# ================== 4. –ü–£–õ –¢–û–ö–ï–ù–û–í ==================
token_pool = []
token_cycle = None

# ================== 5. LOGIN_CRM —á–µ—Ä–µ–∑ Playwright ==================
def login_crm(username, password, p) -> Optional[Dict]:
    browser = None
    try:
        print(f"[PLW] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è {username}...")
        browser = p.chromium.launch(
            headless=True,
            timeout=15000,
            args=[
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-video-decode',
                '--disable-accelerated-video-encode',
                '--disable-gpu-memory-buffer-video-frames',
                '--single-process',
                '--no-zygote',
                '--disable-features=site-per-process,Translate,BlinkGenPropertyTrees'
            ]
        )

        page = browser.new_page()
        page.set_default_timeout(25000)

        page.goto(LOGIN_URL_PLW, wait_until='load', timeout=15000)
        page.type(LOGIN_SELECTOR, username, delay=50)
        time.sleep(1)
        page.type(PASSWORD_SELECTOR, password, delay=50)
        time.sleep(1)
        page.click(SIGN_IN_BUTTON_SELECTOR)
        time.sleep(4)

        page.goto(DASHBOARD_URL, wait_until='domcontentloaded', timeout=10000)
        time.sleep(1)

        if "dashboard" in page.url:
            print(f"[LOGIN OK] {username} –≤–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ ‚úÖ")
            cookies = page.context.cookies()
            cookies_for_requests = '; '.join([f"{c['name']}={c['value']}" for c in cookies])
            user_agent = page.evaluate('navigator.userAgent')
            csrf_token_sec = next((c['value'] for c in cookies if c['name'] == '__Secure-csrf_token'), None)
            csrf_value = csrf_token_sec.split('.')[0] if csrf_token_sec else None

            return {
                "username": username,
                "csrf": csrf_value,
                "time": int(time.time()),
                "user_agent": user_agent,
                "cookie_header": cookies_for_requests
            }

        print(f"[LOGIN FAIL] {username}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ ({page.url})")
        return None

    except Exception as e:
        print(f"[LOGIN ERR] {username}: {type(e).__name__}: {e}")
        return None
    finally:
        if browser:
            browser.close()

# ================== 6. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í ==================
def init_token_pool():
    global token_pool, token_cycle
    print("üîê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ CRM...")
    try:
        with sync_playwright() as p:
            new_pool = []
            for acc in accounts:
                token_data = login_crm(acc["username"], acc["password"], p)
                if token_data:
                    new_pool.append(token_data)
            token_pool = new_pool
            token_cycle = itertools.cycle(token_pool) if token_pool else None
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(token_pool)} —Ç–æ–∫–µ–Ω–æ–≤ CRM.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {type(e).__name__}: {e}")
    print("üöÄ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã.")

def get_next_token() -> Optional[Dict]:
    global token_cycle, token_pool
    if not token_cycle:
        init_token_pool()
        if not token_cycle:
            return None
    try:
        return next(token_cycle)
    except StopIteration:
        return None

# ================== 7. CRM GET ==================
def crm_get(endpoint, params=None):
    for _ in range(2):
        token = get_next_token()
        if not token:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ CRM."

        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "User-Agent": token["user_agent"],
            "Cookie": token["cookie_header"]
        }
        if token["csrf"]:
            headers["X-CSRF-Token"] = token["csrf"]

        url = f"{BASE_URL}{endpoint}"
        try:
            r = requests.get(url, headers=headers, params=params, timeout=15)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

        if r.status_code in (401, 403):
            print(f"[AUTH] {token['username']} ‚Üí —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –ø–µ—Ä–µ–ª–æ–≥–∏–Ω...")
            with sync_playwright() as p:
                new_t = login_crm(token["username"], next(a["password"] for a in accounts if a["username"] == token["username"]), p)
            if new_t:
                token_pool = [t if t["username"] != new_t["username"] else new_t for t in token_pool]
                token_cycle = itertools.cycle(token_pool)
                continue
        return r
    return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."

# ================== 8. –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê ID (GitHub) ==================
LAST_FETCH_TIME = 0
FETCH_INTERVAL = 3600  # 1 —á–∞—Å

def fetch_allowed_users():
    global ALLOWED_USER_IDS, LAST_FETCH_TIME
    print("[AUTH-LOG] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ ID...")
    try:
        r = requests.get(ALLOWED_USERS_URL, timeout=10)
        print(f"[AUTH-LOG] HTTP {r.status_code} –æ—Ç GitHub")
        if r.status_code == 200:
            data = r.json()
            new_ids = [int(i) for i in data.get("allowed_users", []) if str(i).isdigit()]
            if new_ids:
                ALLOWED_USER_IDS = new_ids
                LAST_FETCH_TIME = int(time.time())
                print(f"[AUTH-LOG] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALLOWED_USER_IDS)} ID: {ALLOWED_USER_IDS}")
            else:
                print("[AUTH-LOG] ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        else:
            print(f"[AUTH-LOG] ‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text[:100]}")
    except Exception as e:
        print(f"[AUTH-LOG] üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ID: {e}")

def periodic_fetch():
    while True:
        fetch_allowed_users()
        time.sleep(FETCH_INTERVAL)

# ================== 9. –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê ==================
def search_by_iin(iin):
    r = crm_get("/api/v2/person-search/by-iin", {"iin": iin})
    if isinstance(r, str): return r
    if r.status_code != 200:
        return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    p = r.json()
    return (
        f"üë§ <b>{p.get('snf','')}</b>\n"
        f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {p.get('phone_number','')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {p.get('address','')}"
    )

def search_by_phone(phone):
    clean = ''.join(filter(str.isdigit, phone))
    if clean.startswith("8"): clean = "7" + clean[1:]
    r = crm_get("/api/v2/person-search/by-phone", {"phone": clean})
    if isinstance(r, str): return r
    if r.status_code != 200:
        return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    data = r.json()
    if not data: return "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    p = data[0] if isinstance(data, list) else data
    return (
        f"üë§ <b>{p.get('snf','')}</b>\n"
        f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {p.get('phone_number','')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {p.get('address','')}"
    )

def search_by_fio(text):
    parts = text.split(" ")
    q = {"limit": 10, "smart_mode": "false"}
    if len(parts) >= 1: q["surname"] = parts[0]
    if len(parts) >= 2: q["name"] = parts[1]
    if len(parts) >= 3: q["father_name"] = parts[2]
    r = crm_get("/api/v2/person-search/smart", q)
    if isinstance(r, str): return r
    if r.status_code != 200:
        return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    data = r.json()
    if not data: return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    if isinstance(data, dict): data = [data]
    results = []
    for i, p in enumerate(data[:10], start=1):
        results.append(f"{i}. üë§ <b>{p.get('snf','')}</b>\nüßæ –ò–ò–ù: <code>{p.get('iin','')}</code>")
    return "üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n" + "\n".join(results)

# ================== 10. FLASK API ==================
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

@app.route('/api/search', methods=['POST'])
def api_search():
    data = request.json
    user_id = data.get('telegram_user_id')
    if user_id is None:
        return jsonify({"error": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."}), 403

    try:
        user_id_int = int(user_id)
    except ValueError:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID."}), 403

    if user_id_int not in ALLOWED_USER_IDS:
        print(f"[ACCESS DENIED] user_id={user_id_int}, allowed={ALLOWED_USER_IDS}")
        return jsonify({"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}), 403

    query = data.get('query', '').strip()
    if not query:
        return jsonify({"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400

    if query.isdigit() and len(query) == 12:
        reply = search_by_iin(query)
    elif query.startswith("+") or query.startswith("8") or query.startswith("7"):
        reply = search_by_phone(query)
    else:
        reply = search_by_fio(query)

    if reply.startswith("‚ùå") or reply.startswith("‚ö†Ô∏è"):
        return jsonify({"error": reply}), 400
    return jsonify({"result": reply})

@app.route('/api/refresh-users', methods=['POST'])
def refresh_users():
    auth_header = request.headers.get('Authorization')
    if auth_header != f"Bearer {SECRET_TOKEN}":
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω"}), 403
    print("[AUTH-LOG] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID...")
    fetch_allowed_users()
    return jsonify({
        "status": "success",
        "message": "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω.",
        "loaded_count": len(ALLOWED_USER_IDS)
    }), 200

# ================== 11. –°–¢–ê–†–¢ ==================
print("--- üî¥ –ó–ê–ü–£–°–ö API üî¥ ---")
print("üîê –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ ID —Å GitHub...")
fetch_allowed_users()
print("üîÑ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID...")
Thread(target=periodic_fetch, daemon=True).start()
print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ CRM...")
Thread(target=init_token_pool, daemon=True).start()

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
