# -*- coding: utf-8 -*-
import requests
import json
import os
import time
import itertools
from flask import Flask, request, jsonify 
from flask_cors import CORS 
from threading import Thread 
from playwright.sync_api import sync_playwright # –°–ò–ù–•–†–û–ù–ù–´–ô PLAYWRIGHT –î–õ–Ø FLASK/GUNICORN 
from typing import Optional, Dict
import re

# ================== 1. –ù–ê–°–¢–†–û–ô–ö–ò –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==================

# üõë 1. –ó–ê–ú–ï–ù–ò–¢–ï: –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8240195944:AAEQFd2met5meCU1uwu5PvPejJoiKu94cms" 

# üü¢ 2. URL –ù–ê –í–ê–® –í–ù–ï–®–ù–ò–ô JSON-–§–ê–ô–õ –°–û –°–ü–ò–°–ö–û–ú ID
ALLOWED_USERS_URL = "https://raw.githubusercontent.com/RR-alt-pixel/test/refs/heads/main/allowed_ids.json" 
ALLOWED_USER_IDS = [0] 

BASE_URL = "https://crm431241.ru" # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π BASE_URL –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
SECRET_TOKEN = "Refresh-Server-Key-2025-Oct-VK44" 

# ================== 2. –ù–ê–°–¢–†–û–ô–ö–ò PLAYWRIGHT ==================
LOGIN_URL_PLW = f"{BASE_URL}/auth/login" 
DASHBOARD_URL = f"{BASE_URL}/dashboard" 
LOGIN_SELECTOR = '#username' 
PASSWORD_SELECTOR = '#password' 
SIGN_IN_BUTTON_SELECTOR = 'button[type="submit"]' # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏

# ================== 3. –ê–ö–ö–ê–£–ù–¢–´ –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==================
# –ò—Å–ø–æ–ª—å–∑—É–µ–º blue1, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
accounts = [
    {"username": "blue1", "password": "852dfghm"}, 
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—É–ª–∞
token_pool = []
token_cycle = None

# ================== 4. –ú–û–î–ï–õ–¨ –¢–û–ö–ï–ù–ê (–°–ª–æ–≤–∞—Ä—å) ==================
# –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º

# ================== 5. –õ–û–ì–ò–ö–ê CRM –ò –¢–û–ö–ï–ù–´ (Playwright) ==================

# ================== –õ–û–ì–ò–ö–ê CRM –ò –¢–û–ö–ï–ù–´ (Playwright) ==================

def login_crm(username, password, p) -> Optional[Dict]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Playwright, –ø–æ–ª–∞–≥–∞—è—Å—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è 
    PLAYWRIGHT_BROWSERS_PATH –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞.
    """
    browser = None
    
    try:
        print(f"[PLW] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞. –û–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        
        # üî¥ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏/—Å–∫–æ—Ä–æ—Å—Ç–∏
        browser = p.chromium.launch(
            headless=True,
            args=[
                '--no-sandbox', 
                '--disable-setuid-sandbox',
                '--disable-gpu',           # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ GPU (–≤–∞–∂–Ω–æ –¥–ª—è –±–µ–∑–≥–æ–ª–æ–≤—ã—Ö)
                '--disable-dev-shm-usage', # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /dev/shm
                '--single-process',        # –ó–∞–ø—É—Å–∫ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                '--no-zygote'              # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            ],
            timeout=30000 # –ú–∞–∫—Å. 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—É—Å–∫
        )
        
        # üî¥ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∫—Ä–∞—â–µ–Ω –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = browser.new_page()
        page.set_default_timeout(30000) 

        print(f"[PLW] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞: {LOGIN_URL_PLW}")
        # –°–æ–∫—Ä–∞—â–µ–Ω wait_until –¥–æ load
        page.goto(LOGIN_URL_PLW, wait_until='load', timeout=15000) 
        
        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        page.type(LOGIN_SELECTOR, username, delay=50) 
        time.sleep(1.0) 
        page.type(PASSWORD_SELECTOR, password, delay=50)
        time.sleep(2.0) # –ù–µ–º–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–æ

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        page.click(SIGN_IN_BUTTON_SELECTOR)
        time.sleep(4) # –ù–µ–º–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–æ

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        page.goto(DASHBOARD_URL, wait_until='load', timeout=10000)
        time.sleep(2) # –ù–µ–º–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–æ

        if "dashboard" in page.url:
            print(f"[LOGIN PLW] {username} ‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω. URL: {page.url}")
            
            cookies = page.context.cookies()
            cookies_for_requests = '; '.join([f"{c['name']}={c['value']}" for c in cookies])
            user_agent = page.evaluate('navigator.userAgent')

            # –õ–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞
            csrf_token_sec = next((c['value'] for c in cookies if c['name'] == '__Secure-csrf_token'), None)
            if csrf_token_sec:
                csrf_value = csrf_token_sec.split('.')[0] 
            else:
                print(f"[WARN] {username}: CSRF-—Ç–æ–∫–µ–Ω '__Secure-csrf_token' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É.")
                csrf_value = "MISSING_CSRF_PLACEHOLDER"
                
            return {
                "username": username, "csrf": csrf_value, "time": int(time.time()),
                "user_agent": user_agent, "cookie_header": cookies_for_requests 
            }
        
        print(f"[LOGIN PLW FAIL] {username}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. URL: {page.url}")
        return None

    except Exception as e:
        print(f"[LOGIN PLW ERR] {username}: {type(e).__name__}: {e}")
        return None
    finally:
        if browser:
            browser.close()
            
def init_token_pool():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Ç–æ–∫–µ–Ω–æ–≤, –∞–≤—Ç–æ—Ä–∏–∑—É—è—Å—å —á–µ—Ä–µ–∑ Playwright."""
    global token_pool, token_cycle
    token_pool.clear()
    
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–ø—É—Å—Ç–∏—Ç Playwright)...")
    
    with sync_playwright() as p:
        for acc in accounts:
            tok = login_crm(acc["username"], acc["password"], p)
            if tok:
                token_pool.append(tok)
                print(f"[POOL] –ê–∫–∫–∞—É–Ω—Ç {tok['username']} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            else:
                print(f"[POOL] –ê–∫–∫–∞—É–Ω—Ç {acc['username']} –Ω–µ —Å–º–æ–≥ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        
    if not token_pool:
        print("‚ùå –ü—É–ª —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ Playwright.")
        token_cycle = None
    else:
        token_cycle = itertools.cycle(token_pool)
        print(f"[POOL] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(token_pool)} —Ç–æ–∫–µ–Ω–æ–≤ (—á–µ—Ä–µ–∑ Playwright) ‚úÖ")

def get_next_token() -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∏–∑ –ø—É–ª–∞, –∏–ª–∏ None."""
    global token_cycle, token_pool
    
    if not token_cycle:
        print("[AUTH] –ü—É–ª —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç. –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        init_token_pool()
        if not token_cycle:
            return None
            
    try:
        return next(token_cycle)
    except StopIteration:
        # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è —Å itertools.cycle, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        return None

def crm_get(endpoint, params=None):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç API-–∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ –ø—É–ª–∞, —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 401/403 –∏ 
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
    """
    for _ in range(2): # 2 –ø–æ–ø—ã—Ç–∫–∏: —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –∏ –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ —Ä–µ–ª–æ–≥–∏–Ω–∞
        token = get_next_token()
        if not token:
            return "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ CRM."

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ Playwright
        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "User-Agent": token["user_agent"], 
            "Cookie": token["cookie_header"], # –ü–æ–ª–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å—Ç—Ä–æ–∫–∞ –∫—É–∫–∏
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–≥–ª—É—à–∫–∞
        if token["csrf"] != "MISSING_CSRF_PLACEHOLDER":
             headers["X-CSRF-Token"] = token["csrf"]

        url = f"{BASE_URL}{endpoint}" # –î–æ–±–∞–≤–ª—è–µ–º BASE_URL –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        
        try:
            r = requests.get(url, headers=headers, params=params, timeout=15)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

        if r.status_code in (401, 403):
            print(f"[AUTH] {token['username']} ‚Üí —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∞...")
            
            acc_info = next((acc for acc in accounts if acc["username"] == token["username"]), None)
            if acc_info:
                # –ü–ï–†–ï–õ–û–ì–ò–ù –ß–ï–†–ï–ó PLAYWRIGHT
                with sync_playwright() as p:
                    new_t = login_crm(acc_info["username"], acc_info["password"], p)
                
                if new_t:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø—É–ª–µ
                    idx = next((i for i, t in enumerate(token_pool) if t["username"] == token["username"]), None)
                    if idx is not None:
                        token_pool[idx] = new_t
                    token_cycle = itertools.cycle(token_pool) # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª
                    print(f"[AUTH] {token['username']} –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
                    continue # –ü–æ–≤—Ç–æ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª (—Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º)
                else:
                    print(f"[AUTH FAIL] {token['username']} –Ω–µ —Å–º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è.")
        
        # –ï—Å–ª–∏ –Ω–µ 401/403 –∏–ª–∏ –ø–æ—Å–ª–µ —Ä–µ–ª–æ–≥–∏–Ω–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª continue
        return r
    
    return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏." # –ï—Å–ª–∏ 2 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å

# ================== 6. –õ–û–ì–ò–ö–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –ó–ê–ì–†–£–ó–ö–ò ID (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ==================
LAST_FETCH_TIME = 0
FETCH_INTERVAL = 3600

def fetch_allowed_users():
    global ALLOWED_USER_IDS, LAST_FETCH_TIME
    print("[AUTH-LOG] –ù–∞—á–∞–ª–æ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ ID.")
    try:
        response = requests.get(ALLOWED_USERS_URL, timeout=10) 
        print(f"[AUTH-LOG] –°—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç GitHub: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            new_list = [int(i) for i in data.get("allowed_users", [])]
            
            if new_list:
                ALLOWED_USER_IDS = new_list
                LAST_FETCH_TIME = int(time.time())
                print(f"[AUTH-LOG] –£–°–ü–ï–•! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALLOWED_USER_IDS)} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID.")
            else:
                print("[AUTH-LOG ERROR] –°–ø–∏—Å–æ–∫ ID –ø—É—Å—Ç –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ.")
        else:
            print(f"[AUTH-LOG ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
    except Exception as e:
        print(f"[AUTH-LOG CRITICAL ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

def periodic_fetch():
    while True:
        fetch_allowed_users()
        time.sleep(FETCH_INTERVAL) 

# ================== 7. –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê (—Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π BASE_URL) ==================

def search_by_iin(iin):
    ENDPOINT = "/api/v2/person-search/by-iin" # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç
    r = crm_get(ENDPOINT, params={"iin": iin})
    if isinstance(r, str): return r
    
    if r.status_code == 404: 
        return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ò–ò–ù."
    if r.status_code != 200: return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    
    p = r.json()
    return (
        f"üë§ <b>{p.get('snf','')}</b>\n"
        f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
        f"üöª –ü–æ–ª: {p.get('sex','')}\n"
        f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {p.get('nationality','')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {p.get('phone_number','')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {p.get('address','')}"
    )

def search_by_phone(phone):
    ENDPOINT = "/api/v2/person-search/by-phone" # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç
    clean = ''.join(filter(str.isdigit, phone))
    if clean.startswith("8"): clean = "7" + clean[1:]
    r = crm_get(ENDPOINT, params={"phone": clean})
    if isinstance(r, str): return r
    if r.status_code == 404: return f"‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É {phone}"
    if r.status_code != 200: return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    
    data = r.json()
    if not data: return f"‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É {phone}"
    p = data[0] if isinstance(data, list) else data
    return (
        f"üë§ <b>{p.get('snf','')}</b>\n"
        f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
        f"üöª –ü–æ–ª: {p.get('sex','')}\n"
        f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {p.get('nationality','')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {p.get('phone_number','')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {p.get('address','')}"
    )

def search_by_fio(text):
    ENDPOINT = "/api/v2/person-search/smart" # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç
    if text.startswith(",,"):
        parts = text[2:].strip().split()
        if len(parts) < 2: return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ ',,'"
        q = {"name": parts[0], "father_name": " ".join(parts[1:]), "smart_mode": "false", "limit": 10}
    else:
        parts = text.split(" ")
        params = {}
        if len(parts) >= 1 and parts[0] != "": params["surname"] = parts[0]
        if len(parts) >= 2 and parts[1] != "": params["name"] = parts[1]
        if len(parts) >= 3 and parts[2] != "": params["father_name"] = parts[2]
        q = {**params, "smart_mode": "false", "limit": 10}

    r = crm_get(ENDPOINT, params=q)
    if isinstance(r, str): return r
    if r.status_code == 404: return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    if r.status_code != 200: return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    
    data = r.json()
    if not data: return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    if isinstance(data, dict): data = [data]
    
    results = []
    for i, p in enumerate(data[:10], start=1):
        results.append(
            f"{i}. üë§ <b>{p.get('snf','')}</b>\n"
            f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
            f"üöª –ü–æ–ª: {p.get('sex','')}\n"
            f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {p.get('nationality','')}"
        )
    return "üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û:\n\n" + "\n".join(results)

# ================== 8. API ENDPOINT (Flask) ==================
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}}) 

@app.route('/api/search', methods=['POST'])
def api_search():
    data = request.json
    user_id = data.get('telegram_user_id')
    
    if user_id is None:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."}), 403

    try:
        if int(user_id) not in ALLOWED_USER_IDS:
            print(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è ID: {user_id}")
            return jsonify({"error": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."}), 403
    except ValueError:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}), 403
    
    if not token_pool:
        return jsonify({"error": "–°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤. –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ CRM."}), 400
        
    query = data.get('query', '').strip()
    
    if not query:
        return jsonify({"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400

    if query.isdigit() and len(query) == 12:
        reply = search_by_iin(query)
    elif query.startswith("+") or query.startswith("8") or query.startswith("7"):
        reply = search_by_phone(query)
    else:
        reply = search_by_fio(query)

    if reply.startswith('‚ùå') or reply.startswith('‚ö†Ô∏è'):
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 400, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        return jsonify({"error": reply.replace("‚ùå ", "").replace("‚ö†Ô∏è ", "")}), 400
        
    return jsonify({"result": reply})


@app.route('/api/refresh-users', methods=['POST'])
def refresh_users():
    auth_header = request.headers.get('Authorization')
    if auth_header != f"Bearer {SECRET_TOKEN}":
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}), 403

    print("[AUTH-LOG] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –∑–∞–ø—É—â–µ–Ω–æ –≤—Ä—É—á–Ω—É—é.")
    fetch_allowed_users()
    
    return jsonify({
        "status": "success", 
        "message": "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.",
        "loaded_count": len(ALLOWED_USER_IDS)
    }), 200

# ================== 9. –ó–ê–ü–£–°–ö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ==================

print("--- üî¥ DEBUG: –ù–ê–ß–ê–õ–û –ó–ê–ü–£–°–ö–ê API üî¥ ---")
# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID (–Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
print("üîê –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ ID...")
fetch_allowed_users() 
# 2. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID
print("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID...")
Thread(target=periodic_fetch, daemon=True).start() 
# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–∑–∞–ø—É—Å—Ç–∏—Ç Playwright)
print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–ø—É—Å—Ç–∏—Ç Playwright)...")
Thread(target=init_token_pool, daemon=True).start() 

print("üöÄ API-—Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤.")

# ================== –ó–ê–ü–£–°–ö (–¢–û–õ–¨–ö–û –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø) ==================
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
