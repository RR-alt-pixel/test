# -*- coding: utf-8 -*-
import os
import time
import json
import itertools
import traceback
from threading import Thread, Lock
from typing import Optional, Dict, List

import requests
from flask import Flask, request, jsonify
from flask_cors import CORS

# Playwright (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
from playwright.sync_api import sync_playwright, Browser, Page

# ================== 1. –ù–ê–°–¢–†–û–ô–ö–ò –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==================
BOT_TOKEN = "8240195944:AAEQFd2met5meCU1uwu5PvPejJoiKu94cms"

ALLOWED_USERS_URL = "https://raw.githubusercontent.com/RR-alt-pixel/test/refs/heads/main/allowed_ids.json"
ALLOWED_USER_IDS: List[int] = [0]

BASE_URL = "https://crm431241.ru"
LOGIN_PAGE = f"{BASE_URL}/auth/login"
API_BASE = "https://crm431241.ru"
SECRET_TOKEN = "Refresh-Server-Key-2025-Oct-VK44"

LOGIN_SELECTOR = "#username"
PASSWORD_SELECTOR = "#password"
SIGN_IN_BUTTON_SELECTOR = "button[type='submit']"

TOKENS_FILE = "tokens.json"
TOKENS_LOCK = Lock()

# ================== 2. –ê–ö–ö–ê–£–ù–¢–´ ==================
accounts = [
    {"username": "blue6", "password": "33dff63d"},
    {"username": "blue7", "password": "842dfghm"},
    {"username": "blue8", "password": "89df45bg"},
    {"username": "blue9", "password": "3363f44d"},
    {"username": "pink5", "password": "ugsdf413"},
    {"username": "pink6", "password": "851hjk74"},
    {"username": "pink7", "password": "85tg24vd"},
    {"username": "pink8", "password": "14gh1223"},
    {"username": "pink9", "password": "845ghj65"},
]

# ================== 3. –ü–£–õ –¢–û–ö–ï–ù–û–í ==================
# –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç:
# {
#   "username": "...",
#   "cookie_header": "name=val; name2=val2",
#   "user_agent": "...",
#   "time": 1234567890  # last refreshed timestamp
# }
token_pool: List[Dict] = []
token_cycle = None

# Helper to read/write tokens.json atomically
def load_tokens_from_file() -> List[Dict]:
    global token_pool, token_cycle
    try:
        if os.path.exists(TOKENS_FILE):
            with open(TOKENS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, list):
                    token_pool = data
                    token_cycle = itertools.cycle(token_pool) if token_pool else None
                    print(f"[TOKENS] üîÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(token_pool)} —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ {TOKENS_FILE}.")
                    return token_pool
    except Exception as e:
        print(f"[TOKENS ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {TOKENS_FILE}: {e}")
        traceback.print_exc()
    token_pool = []
    token_cycle = None
    return []

def save_tokens_to_file():
    global token_pool
    try:
        with TOKENS_LOCK:
            tmp = TOKENS_FILE + ".tmp"
            with open(tmp, "w", encoding="utf-8") as f:
                json.dump(token_pool, f, ensure_ascii=False, indent=2)
            os.replace(tmp, TOKENS_FILE)
            print(f"[TOKENS] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(token_pool)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ {TOKENS_FILE}.")
    except Exception as e:
        print(f"[TOKENS ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        traceback.print_exc()

# ================== 4. PLAYWRIGHT LOGIN (extract cookies) ==================
def login_crm_playwright(username: str, password: str, p, show_browser: bool = False) -> Optional[Dict]:
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Playwright, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ None.
    show_browser=True ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –≤ Render –æ—Å—Ç–∞–≤–ª—è—Ç—å False.
    """
    browser: Optional[Browser] = None
    try:
        print(f"[PLW] üîµ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥ {username}...")
        browser = p.chromium.launch(
            headless=not show_browser,
            args=[
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--disable-features=site-per-process,Translate,BlinkGenPropertyTrees"
            ],
            timeout=60000
        )
        context = browser.new_context()
        page: Page = context.new_page()
        page.set_default_timeout(30000)

        page.goto(LOGIN_PAGE, wait_until="load", timeout=30000)

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–≤–æ–¥, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
        page.fill(LOGIN_SELECTOR, username)
        time.sleep(0.4)
        page.fill(PASSWORD_SELECTOR, password)
        time.sleep(0.4)
        page.click(SIGN_IN_BUTTON_SELECTOR)

        # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        try:
            page.wait_for_url("**/dashboard**", timeout=10000)
        except Exception:
            time.sleep(2)

        # –°–æ–±–∏—Ä–∞–µ–º cookies –∏ UA
        cookies = context.cookies()
        cookie_header = "; ".join([f"{c['name']}={c['value']}" for c in cookies])
        user_agent = page.evaluate("() => navigator.userAgent")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∏–º–µ–Ω–∞–º cookie –Ω–∞–π—Ç–∏ access/csrf
        access_cookie = next((c["value"] for c in cookies if "access" in c["name"].lower() and "token" in c["name"].lower()), None)
        csrf_cookie = next((c["value"] for c in cookies if "csrf" in c["name"].lower()), None)

        # fallback: localStorage/sessionStorage
        if not access_cookie or not csrf_cookie:
            try:
                ls = page.evaluate("() => Object.assign({}, window.localStorage)")
                for k, v in ls.items():
                    kl = k.lower()
                    if ("access" in kl and "token" in kl) and not access_cookie:
                        access_cookie = v
                    if ("csrf" in kl) and not csrf_cookie:
                        csrf_cookie = v
            except Exception:
                pass

            try:
                ss = page.evaluate("() => Object.assign({}, window.sessionStorage)")
                for k, v in ss.items():
                    kl = k.lower()
                    if ("access" in kl and "token" in kl) and not access_cookie:
                        access_cookie = v
                    if ("csrf" in kl) and not csrf_cookie:
                        csrf_cookie = v
            except Exception:
                pass

        # –ï—Å–ª–∏ cookie –µ—Å—Ç—å ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–∫–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if cookie_header:
            token = {
                "username": username,
                "cookie_header": cookie_header,
                "user_agent": user_agent,
                "time": int(time.time())
            }
            print(f"[PLW] ‚úÖ {username} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∫—É–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã.")
            return token
        else:
            print(f"[PLW] ‚ö†Ô∏è {username}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏.")
            return None

    except Exception as e:
        print(f"[PLW ERROR] {username}: {type(e).__name__}: {e}")
        traceback.print_exc()
        return None
    finally:
        try:
            if browser:
                browser.close()
        except Exception:
            pass

# ================== 5. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–£–õ–ê (playwright-driven) ==================
def init_token_pool_playwright(show_browser: bool = False):
    """
    –õ–æ–≥–∏–Ω –ø–æ –≤—Å–µ–º —É—á—ë—Ç–∫–∞–º –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ token_pool.
    –ï—Å–ª–∏ –µ—Å—Ç—å tokens.json ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏–º –µ–≥–æ (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–Ω –∫–∞–∂–¥—ã–π —Å—Ç–∞—Ä—Ç).
    """
    global token_pool, token_cycle
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –¥–∏—Å–∫–∞
    load_tokens_from_file()
    if token_pool:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —É—á—ë—Ç–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏–Ω–∞—á–µ –¥–æ–ø–æ–ª–Ω–∏–º
        existing_usernames = {t["username"] for t in token_pool}
        need_login = [a for a in accounts if a["username"] not in existing_usernames]
        if not need_login:
            token_cycle = itertools.cycle(token_pool)
            print(f"[POOL] üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ {TOKENS_FILE}.")
            return

    print("[POOL] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Playwright...")
    token_pool = []
    try:
        with sync_playwright() as p:
            for acc in accounts:
                tok = login_crm_playwright(acc["username"], acc["password"], p, show_browser=show_browser)
                if tok:
                    token_pool.append(tok)
                    print(f"[POOL] ‚úÖ {acc['username']} –¥–æ–±–∞–≤–ª–µ–Ω.")
                else:
                    print(f"[POOL] ‚ö†Ô∏è {acc['username']} –Ω–µ –¥–∞–ª —Ç–æ–∫–µ–Ω—ã.")
    except Exception as e:
        print(f"[POOL ERROR] during init: {e}")
        traceback.print_exc()

    if token_pool:
        token_cycle = itertools.cycle(token_pool)
        save_tokens_to_file()
        print(f"[POOL] üü¢ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(token_pool)} —Ç–æ–∫–µ–Ω–æ–≤.")
    else:
        token_cycle = None
        print("[POOL] ‚ùå –ü—É–ª —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω-—Ñ–ª–æ—É.")

# ================== 6. –ü–û–õ–£–ß–ï–ù–ò–ï –°–õ–ï–î–£–Æ–©–ï–ì–û –¢–û–ö–ï–ù–ê (ROUND-ROBIN) ==================
def get_next_token() -> Optional[Dict]:
    global token_cycle, token_pool
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª (–ø–æ–ø—ã—Ç–∫–∞)
    if not token_cycle:
        print("[AUTH] token_cycle –ø—É—Å—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª...")
        init_token_pool_playwright()
        if not token_cycle:
            return None
    try:
        current_token = next(token_cycle)
        print(f"[POOL] üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {current_token.get('username')}")
        return current_token
    except Exception as e:
        print(f"[POOL ERROR] next(token_cycle): {e}")
        return None

# ================== 7. CRM GET (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—É–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏ 401/403) ==================
def refresh_token_for_username(username: str, show_browser: bool = False) -> Optional[Dict]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—á—ë—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª."""
    global token_pool, token_cycle
    try:
        with sync_playwright() as p:
            new_t = login_crm_playwright(username, next(a["password"] for a in accounts if a["username"] == username), p, show_browser=show_browser)
        if new_t:
            replaced = False
            for i, t in enumerate(token_pool):
                if t.get("username") == username:
                    token_pool[i] = new_t
                    replaced = True
                    break
            if not replaced:
                token_pool.append(new_t)
            token_cycle = itertools.cycle(token_pool)
            save_tokens_to_file()
            print(f"[AUTH] ‚úÖ {username} token refreshed and saved.")
            return new_t
        else:
            print(f"[AUTH] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è {username}.")
            return None
    except Exception as e:
        print(f"[AUTH ERROR] refresh {username}: {e}")
        traceback.print_exc()
        return None

def crm_get(endpoint: str, params: dict = None):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å –≤ CRM, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∏–∑ –ø—É–ª–∞.
    –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 401/403 ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω (Playwright) –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º.
    """
    global token_pool, token_cycle

    for attempt in range(2):  # –ø–æ–ø—ã—Ç–∫–∞: —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω, –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        token = get_next_token()
        if not token:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ CRM."

        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "User-Agent": token.get("user_agent", "python-requests"),
            "Cookie": token.get("cookie_header", ""),
        }
        url = endpoint if endpoint.startswith("http") else API_BASE + endpoint

        try:
            r = requests.get(url, headers=headers, params=params, timeout=15)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–ø–∞–ª–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
        if r.status_code in (401, 403):
            uname = token.get("username")
            print(f"[AUTH] {uname} token invalid (status {r.status_code}) ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Playwright...")
            new_t = refresh_token_for_username(uname)
            if new_t:
                print(f"[AUTH] {uname} token –æ–±–Ω–æ–≤–ª—ë–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å.")
                continue
            else:
                print(f"[AUTH] {uname} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.")
                continue

        return r

    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤."

# ================== 8. DYNAMIC ALLOWED IDS (github) ==================
LAST_FETCH_TIME = 0
FETCH_INTERVAL = 3600

def fetch_allowed_users():
    global ALLOWED_USER_IDS, LAST_FETCH_TIME
    print("[AUTH-LOG] üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ID...")
    try:
        r = requests.get(ALLOWED_USERS_URL, timeout=10)
        print(f"[AUTH-LOG] GitHub status: {r.status_code}")
        if r.status_code == 200:
            data = r.json()
            new_ids = [int(i) for i in data.get("allowed_users", []) if str(i).isdigit()]
            if new_ids:
                ALLOWED_USER_IDS = new_ids
                LAST_FETCH_TIME = int(time.time())
                print(f"[AUTH-LOG] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALLOWED_USER_IDS)} ID.")
            else:
                print("[AUTH-LOG] ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Ä–µ—Å—É—Ä—Å–µ.")
        else:
            print(f"[AUTH-LOG] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞: {r.status_code}")
    except Exception as e:
        print(f"[AUTH-LOG ERROR] {e}")

def periodic_fetch():
    while True:
        try:
            if int(time.time()) - LAST_FETCH_TIME >= FETCH_INTERVAL:
                fetch_allowed_users()
        except Exception:
            pass
        time.sleep(FETCH_INTERVAL)

# ================== 9. SEARCH HELPERS ==================
def search_by_iin(iin: str):
    r = crm_get("/api/v2/person-search/by-iin", params={"iin": iin})
    if isinstance(r, str):
        return r
    if r.status_code == 404:
        return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ò–ò–ù."
    if r.status_code != 200:
        return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    p = r.json()
    return (
        f"üë§ <b>{p.get('snf','')}</b>\n"
        f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
        f"üöª –ü–æ–ª: {p.get('sex','')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {p.get('phone_number','')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {p.get('address','')}"
    )

def search_by_phone(phone: str):
    clean = ''.join(filter(str.isdigit, phone))
    if clean.startswith("8"):
        clean = "7" + clean[1:]
    r = crm_get("/api/v2/person-search/by-phone", params={"phone": clean})
    if isinstance(r, str):
        return r
    if r.status_code == 404:
        return f"‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É {phone}"
    if r.status_code != 200:
        return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    data = r.json()
    if not data:
        return f"‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É {phone}"
    p = data[0] if isinstance(data, list) else data
    return (
        f"üë§ <b>{p.get('snf','')}</b>\n"
        f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
        f"üöª –ü–æ–ª: {p.get('sex','')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {p.get('phone_number','')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {p.get('address','')}"
    )

def search_by_fio(text: str):
    if text.startswith(",,"):
        parts = text[2:].strip().split()
        if len(parts) < 2:
            return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ ',,'"
        q = {"name": parts[0], "father_name": " ".join(parts[1:]), "smart_mode": "false", "limit": 10}
    else:
        parts = text.split(" ")
        params = {}
        if len(parts) >= 1 and parts[0] != "":
            params["surname"] = parts[0]
        if len(parts) >= 2 and parts[1] != "":
            params["name"] = parts[1]
        if len(parts) >= 3 and parts[2] != "":
            params["father_name"] = parts[2]
        q = {**params, "smart_mode": "false", "limit": 10}

    r = crm_get("/api/v2/person-search/smart", params=q)
    if isinstance(r, str):
        return r
    if r.status_code == 404:
        return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    if r.status_code != 200:
        return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    data = r.json()
    if not data:
        return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    if isinstance(data, dict):
        data = [data]
    results = []
    for i, p in enumerate(data[:10], start=1):
        results.append(
            f"{i}. üë§ <b>{p.get('snf','')}</b>\n"
            f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
            f"üöª –ü–æ–ª: {p.get('sex','')}\n"
            f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {p.get('nationality','')}"
        )
    return "üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û:\n\n" + "\n".join(results)

# ================== 10. FLASK API ==================
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

@app.route('/api/search', methods=['POST'])
def api_search():
    data = request.json
    user_id = data.get('telegram_user_id')
    if user_id is None:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."}), 403

    try:
        if int(user_id) not in ALLOWED_USER_IDS:
            print(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è ID: {user_id}")
            return jsonify({"error": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."}), 403
    except Exception:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}), 403

    query = data.get('query', '').strip()
    if not query:
        return jsonify({"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400

    if query.isdigit() and len(query) == 12:
        reply = search_by_iin(query)
    elif query.startswith("+") or query.startswith("8") or query.startswith("7"):
        reply = search_by_phone(query)
    else:
        reply = search_by_fio(query)

    if isinstance(reply, str) and (reply.startswith("‚ùå") or reply.startswith("‚ö†Ô∏è")):
        return jsonify({"error": reply.replace("‚ùå ", "").replace("‚ö†Ô∏è ", "")}), 400

    return jsonify({"result": reply})

@app.route('/api/refresh-users', methods=['POST'])
def refresh_users():
    auth_header = request.headers.get('Authorization')
    if auth_header != f"Bearer {SECRET_TOKEN}":
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}), 403
    print("[AUTH-LOG] manual refresh requested")
    fetch_allowed_users()
    return jsonify({
        "status": "success",
        "message": "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω.",
        "loaded_count": len(ALLOWED_USER_IDS)
    }), 200

@app.route('/api/refresh-token', methods=['POST'])
def refresh_token_endpoint():
    """
    POST {"username": "blue7"} ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —É—á—ë—Ç–∫–∏.
    –¢—Ä–µ–±—É–µ—Ç —Å–µ–∫—Ä–µ—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization: Bearer <SECRET_TOKEN>
    """
    auth_header = request.headers.get('Authorization')
    if auth_header != f"Bearer {SECRET_TOKEN}":
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω."}), 403
    data = request.json or {}
    uname = data.get("username")
    if not uname:
        return jsonify({"error": "username –Ω–µ —É–∫–∞–∑–∞–Ω."}), 400
    new_t = refresh_token_for_username(uname)
    if new_t:
        return jsonify({"status": "ok", "username": uname}), 200
    return jsonify({"status": "fail", "username": uname}), 500

# ================== 11. STARTUP ==================
print("--- üî¥ DEBUG: STARTING API (Playwright-driven tokens) üî¥ ---")

print("üîê Initial fetch allowed users...")
fetch_allowed_users()

print("üîÑ Start periodic allowed-users fetcher...")
Thread(target=periodic_fetch, daemon=True).start()

print("üîê Initializing token pool (Playwright logins)...")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–π –≤–µ—Ç–∫–µ, —á—Ç–æ–±—ã Gunicorn –Ω–µ –∑–∞–≤–∏—Å–∞–ª –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
Thread(target=init_token_pool_playwright, daemon=True).start()

print("üöÄ API server ready to receive requests.")

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
