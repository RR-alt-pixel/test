# -*- coding: utf-8 -*-
import requests
import json
import os
import time
import itertools
from flask import Flask, request, jsonify 
from flask_cors import CORS 
from threading import Thread 
from playwright.sync_api import sync_playwright # üü¢ Playwright –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞

# ================== –ù–ê–°–¢–†–û–ô–ö–ò –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==================

# üõë 1. –ó–ê–ú–ï–ù–ò–¢–ï: –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7966914480:AAEeWXbLeIYjAMLKARCWzSJOKo9c_Cfyvhs" 

# üü¢ 2. URL –ù–ê –í–ê–® –í–ù–ï–®–ù–ò–ô JSON-–§–ê–ô–õ –°–û –°–ü–ò–°–ö–û–ú ID
ALLOWED_USERS_URL = "https://raw.githubusercontent.com/RR-alt-pixel/test/refs/heads/main/allowed_ids.json" 
# –í–†–ï–ú–ï–ù–ù–´–ô –°–ü–ò–°–û–ö: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
ALLOWED_USER_IDS = [0] 

BASE_URL = "https://crm431241.ru/api/v2/person-search/"
LOGIN_URL = "https://crm431241.ru/api/auth/login"
SECRET_TOKEN = "Refresh-Server-Key-2025-Oct-VK44" 

# üü¢ URL –ù–ê –í–ê–® –í–ù–ï–®–ù–ò–ô JSON-–§–ê–ô–õ –° –õ–û–ì–ò–ù–ê–ú–ò/–ü–ê–†–û–õ–Ø–ú–ò
# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ URL –ù–ê –°–°–´–õ–ö–£ –ö –í–ê–®–ï–ú–£ login_accounts.json –ù–ê GITHUB
LOGIN_ACCOUNTS_URL = "https://raw.githubusercontent.com/RR-alt-pixel/test/refs/heads/main/login_accounts.json"

# ================== –ê–ö–ö–ê–£–ù–¢–´ –ò –¢–û–ö–ï–ù–´ ==================
# accounts —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏–Ω—ã/–ø–∞—Ä–æ–ª–∏, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ JSON
accounts_info = [] 
token_pool = []
token_cycle = None

# ================== –õ–û–ì–ò–ö–ê CRM –ò –¢–û–ö–ï–ù–´ ==================

def get_session_cookies(username, password):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Playwright –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JS, –ø–æ–ª—É—á–µ–Ω–∏—è device_fp –∏ —Ä–∞–±–æ—á–∏—Ö –∫—É–∫–∏."""
    print(f"[PLW] –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {username} —á–µ—Ä–µ–∑ Playwright...")
    try:
        with sync_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑–≥–æ–ª–æ–≤—ã–π Chromium, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ Dockerfile
            browser = p.chromium.launch(headless=True)
            context = browser.new_context()
            page = context.new_page()
            
            # 1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            page.goto(LOGIN_URL, timeout=30000) 
            
            # 2. –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã 'input[name="username"]' –∏ 'input[name="password"]' –≤–µ—Ä–Ω—ã.
            page.fill('input[name="username"]', username)
            page.fill('input[name="password"]', password)
            
            # 3. –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –í–æ–π—Ç–∏ –∏ –∂–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
            with page.wait_for_response(
                lambda response: "api/auth/login" in response.url and response.status == 200, 
                timeout=45000 # –î–æ–ª–≥–∏–π —Ç–∞–π–º–∞—É—Ç –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ Render
            ) as response:
                 page.click('button[type="submit"]')

            # 4. –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            cookies = context.cookies()
            
            access_token = next((c['value'] for c in cookies if c['name'] == '__Secure-access_token'), None)
            csrf_token = next((c['value'] for c in cookies if c['name'] == '__Secure-csrf_token'), None)
            session_id = next((c['value'] for c in cookies if c['name'] == '__Secure-session_id'), None)
            
            browser.close()
            
            if access_token and csrf_token and session_id:
                print(f"[PLW] {username} –£–°–ü–ï–•! –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã.")
                return {
                    "username": username,
                    "access": access_token,
                    "csrf": csrf_token,
                    "session_id": session_id,
                    "time": int(time.time())
                }
            
            print(f"[PLW FAIL] {username}: –ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞.")
            return None
            
    except Exception as e:
        print(f"[PLW CRITICAL ERR] {username}: –ê–≤—Ç–æ–ª–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        return None

def init_token_pool():
    global token_pool, token_cycle, accounts_info
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∏–Ω–æ–≤/–ø–∞—Ä–æ–ª–µ–π
    try:
        r = requests.get(LOGIN_ACCOUNTS_URL, timeout=10)
        if r.status_code == 200:
            accounts_info = r.json()
            print(f"[ACCOUNTS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts_info)} –ø–∞—Ä –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
        else:
             print(f"[ACCOUNTS FAIL] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∏–Ω–æ–≤. –°—Ç–∞—Ç—É—Å: {r.status_code}")
             return
    except Exception as e:
        print(f"[ACCOUNTS ERR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–∏–Ω–æ–≤: {e}")
        return
    
    # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Playwright
    token_pool.clear()
    for acc in accounts_info:
        # ‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ (–¥–æ –º–∏–Ω—É—Ç—ã)
        tok = get_session_cookies(acc["username"], acc["password"]) 
        if tok:
            token_pool.append(tok)
            
    if not token_pool:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Playwright –Ω–µ —É–¥–∞–ª–∞—Å—å.")
    else:
        token_cycle = itertools.cycle(token_pool)
        print(f"[POOL] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(token_pool)} —Ç–æ–∫–µ–Ω–æ–≤ ‚úÖ")

def crm_get(endpoint, params=None):
    global token_cycle, token_pool, accounts_info
    
    if not token_pool or not token_cycle:
        init_token_pool()
        if not token_pool:
            return "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ CRM. –ê–≤—Ç–æ–ª–æ–≥–∏–Ω Playwright –Ω–µ —É–¥–∞–ª—Å—è."

    max_attempts = len(token_pool) + 1 # –î–∞–µ–º +1 –ø–æ–ø—ã—Ç–∫—É –Ω–∞ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω

    for attempt in range(max_attempts):
        token = next(token_cycle)
        
        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Cookie": (
                f"__Secure-access_token={token['access']}; "
                f"__Secure-csrf_token={token['csrf']}; "
                f"__Secure-session_id={token['session_id']};" # üü¢ –î–æ–±–∞–≤–ª–µ–Ω session_id
            ),
            "X-CSRF-Token": token["csrf"]
        }

        try:
            r = requests.get(endpoint, headers=headers, params=params, timeout=15)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

        if r.status_code in (401, 403):
            print(f"[AUTH] {token['username']} ‚Üí —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º Playwright –ø–µ—Ä–µ–ª–æ–≥–∏–Ω...")
            
            # –ù–∞—Ö–æ–¥–∏–º –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            acc_info = next((acc for acc in accounts_info if acc["username"] == token["username"]), None)
            
            if acc_info:
                # üü¢ –ü–µ—Ä–µ–ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Playwright
                new_t = get_session_cookies(acc_info["username"], acc_info["password"])
                
                if new_t:
                    # –£—Å–ø–µ—Ö: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø—É–ª–µ
                    idx = next((i for i, t in enumerate(token_pool) if t["username"] == token["username"]), None)
                    if idx is not None:
                        token_pool[idx] = new_t
                    
                    token_cycle = itertools.cycle(token_pool)
                    print(f"[AUTH] {token['username']} –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ Playwright ‚úÖ. –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å.")
                    
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    return crm_get(endpoint, params)
                else:
                    print(f"[AUTH FAIL] {token['username']} –Ω–µ —Å–º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Playwright.")
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω—É
            continue 

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 200 (–∏–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –∫—Ä–æ–º–µ 401/403)
        return r
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∞ –∏ –ø–µ—Ä–µ–±–æ—Ä–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π: –í—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è!")
    return "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ CRM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# ================== –õ–û–ì–ò–ö–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –ó–ê–ì–†–£–ó–ö–ò ID ==================
# ... (–û—Å—Ç–∞–≤–ª—è–µ–º fetch_allowed_users –∏ periodic_fetch –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
LAST_FETCH_TIME = 0
FETCH_INTERVAL = 3600 # –û–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑ –≤ —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)

def fetch_allowed_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    global ALLOWED_USER_IDS, LAST_FETCH_TIME
    print("[AUTH-LOG] –ù–∞—á–∞–ª–æ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ ID.")
    try:
        print(f"[AUTH-LOG] –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ ID —Å {ALLOWED_USERS_URL}...")
        response = requests.get(ALLOWED_USERS_URL, timeout=10) 
        
        print(f"[AUTH-LOG] –°—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç GitHub: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            new_list = [int(i) for i in data.get("allowed_users", [])]
            
            if new_list:
                ALLOWED_USER_IDS = new_list
                LAST_FETCH_TIME = int(time.time())
                print(f"[AUTH-LOG] –£–°–ü–ï–•! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ALLOWED_USER_IDS)} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID.")
            else:
                print("[AUTH-LOG ERROR] –°–ø–∏—Å–æ–∫ ID –ø—É—Å—Ç –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫.")
        else:
            print(f"[AUTH-LOG ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
    except Exception as e:
        print(f"[AUTH-LOG CRITICAL ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

def periodic_fetch():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ ID –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
    while True:
        if int(time.time()) - LAST_FETCH_TIME >= FETCH_INTERVAL:
            fetch_allowed_users()
        time.sleep(FETCH_INTERVAL) 


# ================== –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê ==================
# ... (–û—Å—Ç–∞–≤–ª—è–µ–º search_by_iin, search_by_phone, search_by_fio –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
def search_by_iin(iin):
    r = crm_get(BASE_URL + "by-iin", params={"iin": iin})
    if isinstance(r, str): return r
    if r.status_code != 200: return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    p = r.json()
    return (
        f"üë§ <b>{p.get('snf','')}</b>\n"
        f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
        f"üöª –ü–æ–ª: {p.get('sex','')}\n"
        f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {p.get('nationality','')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {p.get('phone_number','')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {p.get('address','')}"
    )

def search_by_phone(phone):
    clean = ''.join(filter(str.isdigit, phone))
    if clean.startswith("8"): clean = "7" + clean[1:]
    r = crm_get(BASE_URL + "by-phone", params={"phone": clean})
    if isinstance(r, str): return r
    if r.status_code != 200: return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    data = r.json()
    if not data: return f"‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É {phone}"
    p = data[0] if isinstance(data, list) else data
    return (
        f"üë§ <b>{p.get('snf','')}</b>\n"
        f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
        f"üöª –ü–æ–ª: {p.get('sex','')}\n"
        f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {p.get('nationality','')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {p.get('phone_number','')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {p.get('address','')}"
    )

def search_by_fio(text):
    if text.startswith(",,"):
        parts = text[2:].strip().split()
        if len(parts) < 2: return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ ',,'"
        q = {"name": parts[0], "father_name": " ".join(parts[1:]), "smart_mode": "false", "limit": 10}
    else:
        parts = text.split(" ")
        params = {}
        if len(parts) >= 1 and parts[0] != "": params["surname"] = parts[0]
        if len(parts) >= 2 and parts[1] != "": params["name"] = parts[1]
        if len(parts) >= 3 and parts[2] != "": params["father_name"] = parts[2]
        q = {**params, "smart_mode": "false", "limit": 10}

    r = crm_get(BASE_URL + "smart", params=q)
    if isinstance(r, str): return r
    if r.status_code != 200: return f"‚ùå –û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    data = r.json()
    if not data: return "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    if isinstance(data, dict): data = [data]
    
    results = []
    for i, p in enumerate(data[:10], start=1):
        results.append(
            f"{i}. üë§ <b>{p.get('snf','')}</b>\n"
            f"üßæ –ò–ò–ù: <code>{p.get('iin','')}</code>\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {p.get('birthday','')}\n"
            f"üöª –ü–æ–ª: {p.get('sex','')}\n"
            f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {p.get('nationality','')}"
        )
    return "üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û:\n\n" + "\n".join(results)


# ================== API ENDPOINT (Flask) ==================
app = Flask(__name__)

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø CORS: –†–∞–∑—Ä–µ—à–∞–µ–º –í–°–ï –∑–∞–ø—Ä–æ—Å—ã —Å–æ –í–°–ï–• –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
CORS(app, resources={r"/*": {"origins": "*"}}) 

@app.route('/api/search', methods=['POST'])
def api_search():
    data = request.json
    
    # üö® –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ü–û ID üö®
    user_id = data.get('telegram_user_id')
    
    if user_id is None:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."}), 403

    try:
        if int(user_id) not in ALLOWED_USER_IDS:
            print(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è ID: {user_id}")
            return jsonify({"error": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."}), 403
    except ValueError:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}), 403
    # ---------------------------------------------
    
    query = data.get('query', '').strip()
    
    if not query:
        return jsonify({"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400

    if query.isdigit() and len(query) == 12:
        reply = search_by_iin(query)
    elif query.startswith("+") or query.startswith("8") or query.startswith("7"):
        reply = search_by_phone(query)
    else:
        reply = search_by_fio(query)

    if reply.startswith('‚ùå') or reply.startswith('‚ö†Ô∏è'):
        return jsonify({"error": reply.replace("‚ùå ", "").replace("‚ö†Ô∏è ", "")}), 400
        
    return jsonify({"result": reply})


@app.route('/api/refresh-users', methods=['POST'])
def refresh_users():
    """–¢–æ—á–∫–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID."""
    
    # üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
    auth_header = request.headers.get('Authorization')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "Bearer YOUR_SECRET_TOKEN"
    if auth_header != f"Bearer {SECRET_TOKEN}":
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}), 403

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å —Ç–∞–π–º–µ—Ä–∞
    print("[AUTH-LOG] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –∑–∞–ø—É—â–µ–Ω–æ –≤—Ä—É—á–Ω—É—é.")
    fetch_allowed_users()
    
    return jsonify({
        "status": "success", 
        "message": "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.",
        "loaded_count": len(ALLOWED_USER_IDS)
    }), 200


# ================== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò GUNICORN ==================

# –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –∫–æ–≥–¥–∞ Gunicorn –∑–∞–≥—Ä—É–∑–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
print("--- üî¥ DEBUG: –ù–ê–ß–ê–õ–û –ó–ê–ü–£–°–ö–ê API üî¥ ---")

print("üîê –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ ID...")
fetch_allowed_users() 

print("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID...")
Thread(target=periodic_fetch, daemon=True).start() 

print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Playwright (–∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è)...")
init_token_pool() 
print("üöÄ API-—Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤.")

# ================== –ó–ê–ü–£–°–ö (–¢–û–õ–¨–ö–û –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø) ==================
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
